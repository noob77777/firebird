{"version":3,"sources":["Components/Messenger/MessengerMain/MessengerMain.module.scss","Components/Messenger/Contacts/Contacts.module.scss","Components/Notifier/Notifier.module.scss","Components/Login/Login.module.scss","Components/Messenger/Messenger.module.scss","constants.ts","API/API.ts","Components/Notifier/Notifier.tsx","FirebirdContext/ActionTypes.ts","Components/Messenger/MessengerMain/MessengerMain.tsx","FirebirdContext/FirebirdContext.tsx","Components/Login/Login.tsx","Components/Messenger/Contacts/Contacts.tsx","Components/Messenger/Messenger.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["module","exports","USER_PREFIX","GROUP_PREFIX","PRIVATE_KEY_SUFFIX","PUBLIC_KEY_SUFFIX","CONTACTS_SUFFIX","SESSION_KEY","TYPE_TEXT","TYPE_IMAGE","MESSAGE_PENDING","MESSAGE_SENT","MESSAGE_FAILED","API","axios","create","baseURL","timeout","modal","open","set","text","customStyles","content","top","left","right","bottom","marginRight","transform","overlay","backgroundColor","Modal","setAppElement","modalNotify","Notifier","useState","modalIsOpen","setIsOpen","setText","isOpen","onRequestClose","style","contentLabel","className","styles","ActionTypes","LOAD_RSA_KEYS","SIGN_IN","SIGN_UP","LOAD_USER_LOCAL_STATE","UPDATE_CONTACTS","SET_RECEIVER","LOGOUT","NEW_MESSAGE","SEND_NEW_MESSAGE","SET_ACK_FLAG","socket","io","encrypt","message","publicKey","receiver","startsWith","type","key","NodeRSA","importKey","res","body","err","addMessages","contacts","messages","privateKey","sent","forEach","idx","findIndex","contact","isGroup","user","groupName","newGroup","members","push","decrypt","isUser","userName","sender","newUser","active","MessengerMain","useContext","FirebirdContext","state","dispatch","file","setFile","useEffect","element","document","getElementById","scrollTop","scrollHeight","updateScroll","userPresent","currentReceiver","filter","length","sendMessage","data","timestamp","Date","now","id","crypto","createHash","update","auth","digest","status","emit","JSON","stringify","sessionKey","undefined","payload","connected","connect","on","parse","console","log","close","a","get","messageList","localStorage","getItem","updatedContacts","response","getPendingMessages","reader","FileReader","addEventListener","result","toString","header","scroll","Map","map","item","values","MessageViewInner","icon","image","src","alt","replace","toISOString","MessageView","reimage","empty","ncscenter","input","value","onChange","e","target","htmlFor","onClick","hidden","files","readAsDataURL","btn","click","o","initState","hash","createContext","FirebirdContextReducer","action","setItem","contactsNM","contactsSNM","contactsSAF","sessionStorage","removeItem","FirebirdContextProvider","props","useReducer","Provider","children","Login","setUserName","errorMessage","setErrorMessage","onSignIn","preventDefault","post","onSignUp","NodeRsa","b","exportKey","loginContainer","banner","loginForm","formMain","loginHeader","error","submitbtn","Contacts","search","setSearch","filteredContacts","setFilteredContacts","newFilteredContacts","addContact","x","setCurrentReceiver","groupMembers","createGroup","group","joinGroup","resJoin","resMembers","ContactView","index","selected","contactSelected","userIcon","href","removeContact","name","borderbtm","list","vh60","ncpfcenter","Messenger","logout","querySelectorAll","elem","M","Tooltip","getInstance","sidenav","data-position","data-tooltip","messengerContainer","cborder","sidenavIcon","data-target","App","AutoInit","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.52179a72.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"border\":\"MessengerMain_border__3eDiz\",\"MessengerMain\":\"MessengerMain_MessengerMain__G_my1\",\"image\":\"MessengerMain_image__3aedM\",\"input\":\"MessengerMain_input__1o1aS\",\"scroll\":\"MessengerMain_scroll__1Ov-f\",\"header\":\"MessengerMain_header__2ce5m\",\"empty\":\"MessengerMain_empty__M478O\",\"ncscenter\":\"MessengerMain_ncscenter__1KKtL\",\"MessageView\":\"MessengerMain_MessageView__-1IED\",\"receiver\":\"MessengerMain_receiver__3XNND\",\"reimage\":\"MessengerMain_reimage__2S8mA\",\"sender\":\"MessengerMain_sender__1Wrs9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"border\":\"Contacts_border__Sf04J\",\"Contacts\":\"Contacts_Contacts__3HDS0\",\"search\":\"Contacts_search__3nW0o\",\"btn\":\"Contacts_btn__3rFk_\",\"list\":\"Contacts_list__2UyNX\",\"vh60\":\"Contacts_vh60__2AyiT\",\"ncpfcenter\":\"Contacts_ncpfcenter__3ZrMW\",\"ContactView\":\"Contacts_ContactView__16gQn\",\"userIcon\":\"Contacts_userIcon__1i6OM\",\"contactSelected\":\"Contacts_contactSelected__2TcW-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"border\":\"Notifier_border__3db_T\",\"Notifier\":\"Notifier_Notifier__2a7dZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"border\":\"Login_border__1D4hz\",\"Login\":\"Login_Login__WctD9\",\"loginContainer\":\"Login_loginContainer__2sYHN\",\"loginForm\":\"Login_loginForm__2Maah\",\"formMain\":\"Login_formMain__3rcaN\",\"loginHeader\":\"Login_loginHeader__12uTQ\",\"banner\":\"Login_banner__ZQscA\",\"error\":\"Login_error__1hpMK\",\"submitbtn\":\"Login_submitbtn__2BgvP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"border\":\"Messenger_border__2RQFR\",\"Messenger\":\"Messenger_Messenger__1OLXO\",\"messengerContainer\":\"Messenger_messengerContainer__22qNZ\",\"cborder\":\"Messenger_cborder__1xE_B\",\"sidenav\":\"Messenger_sidenav__m8nZf\",\"header\":\"Messenger_header__1xa1v\",\"logout\":\"Messenger_logout__35j93\",\"sidenavIcon\":\"Messenger_sidenavIcon__1kRWm\"};","export const FIREBIRD_SERVER: string = \"http://35.222.126.184\";\nexport const SOCKET_IP: string = \"35.222.126.184\";\n\nexport const USER_PREFIX: string = \"user.\";\nexport const GROUP_PREFIX: string = \"group.\";\nexport const BROADCAST_GROUP: string = \"group.broadcast\";\nexport const USER_SERVER: string = \"user.firebird\";\nexport const PRIVATE_KEY_SUFFIX: string = \".private.key\";\nexport const PUBLIC_KEY_SUFFIX: string = \".public.key\";\nexport const CONTACTS_SUFFIX: string = \".contacts\";\nexport const SESSION_KEY: string = \"session.key\";\n\nexport const NEW_CONNECTION: string = \"new_connection\";\nexport const SEND_MESSAGE: string = \"send_message\";\nexport const RECV_MESSAGE: string = \"recv_message\";\nexport const ACK_MESSAGE: string = \"ack_message\";\nexport const USER_STATE_CHANGE: string = \"user_state_change\";\n\nexport const TYPE_TEXT: string = \"text\";\nexport const TYPE_ACK: string = \"ack\";\nexport const TYPE_IMAGE: string = \"image\";\n\nexport const MESSAGE_PENDING: string = \"message_pending\";\nexport const MESSAGE_SENT: string = \"message_sent\";\nexport const MESSAGE_FAILED: string = \"message_failed\";\n\nexport const FORM_IMAGE_KEY: string = \"form_image_key\";\n","import axios from \"axios\";\nimport { FIREBIRD_SERVER } from \"../constants\";\n\nconst API = axios.create({\n  baseURL: FIREBIRD_SERVER,\n  timeout: 1000,\n});\n\nexport default API;\n","import styles from \"./Notifier.module.scss\";\nimport { useState } from \"react\";\nimport Modal from \"react-modal\";\n\nconst modal = { open: () => {}, set: (text: string) => {} };\n\nconst customStyles = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n  },\n  overlay: {\n    backgroundColor: \"rgba(0, 0, 0, 0.5)\",\n  },\n};\n\n// Make sure to bind modal to your appElement (http://reactcommunity.org/react-modal/accessibility/)\nModal.setAppElement(\"#root\");\n\nconst Notifier = (): JSX.Element => {\n  const [modalIsOpen, setIsOpen] = useState(false);\n  const [text, setText] = useState(\"\");\n\n  function openModal() {\n    setIsOpen(true);\n  }\n\n  modal.open = openModal;\n  modal.set = setText;\n\n  function closeModal() {\n    setIsOpen(false);\n  }\n\n  return (\n    <Modal\n      isOpen={modalIsOpen}\n      onRequestClose={closeModal}\n      style={customStyles}\n      contentLabel=\"firebird: notification\"\n    >\n      <div className={styles.Notifier}>\n        <div className=\"modal-content\">\n          <h3>{\"Something went wrong :(\"}</h3>\n          <h6>{text}</h6>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport const modalNotify = (text: string): void => {\n  modal.set(text);\n  modal.open();\n};\n\nexport default Notifier;\n","const ActionTypes = {\n  LOAD_RSA_KEYS: \"LOAD_RSA_KEYS\",\n  SIGN_IN: \"SIGN_IN\",\n  SIGN_UP: \"SIGN_UP\",\n  LOAD_USER_LOCAL_STATE: \"LOAD_USER_LOCAL_STATE\",\n  UPDATE_CONTACTS: \"UPDATE_CONTACTS\",\n  SET_RECEIVER: \"SET_RECEIVER\",\n  LOGOUT: \"LOGOUT\",\n  NEW_MESSAGE: \"NEW_MESSAGE\",\n  SEND_NEW_MESSAGE: \"SEND_NEW_MESSAGE\",\n  SET_ACK_FLAG: \"SET_ACK_FLAG\",\n};\n\nexport default ActionTypes;\n","import { useContext, useEffect, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport FirebirdContext, {\n  Message,\n  Contact,\n  isGroup,\n  Group,\n  isUser,\n  User,\n} from \"../../../FirebirdContext/FirebirdContext\";\nimport API from \"../../../API/API\";\nimport { modalNotify } from \"../../Notifier/Notifier\";\nimport styles from \"./MessengerMain.module.scss\";\nimport {\n  ACK_MESSAGE,\n  CONTACTS_SUFFIX,\n  GROUP_PREFIX,\n  MESSAGE_FAILED,\n  MESSAGE_PENDING,\n  MESSAGE_SENT,\n  RECV_MESSAGE,\n  SEND_MESSAGE,\n  SOCKET_IP,\n  TYPE_IMAGE,\n  TYPE_TEXT,\n  USER_PREFIX,\n  USER_SERVER,\n  USER_STATE_CHANGE,\n} from \"../../../constants\";\nimport ActionTypes from \"../../../FirebirdContext/ActionTypes\";\nimport crypto from \"crypto\";\nimport NodeRSA from \"node-rsa\";\n\nconst socket = io(SOCKET_IP);\n\nconst decrypt = (message: Message, privateKey: string | null): Message => {\n  if (message.receiver.startsWith(GROUP_PREFIX) || message.type !== TYPE_TEXT) {\n    return { ...message };\n  }\n  if (!privateKey) {\n    return { ...message };\n  }\n  try {\n    const key = new NodeRSA().importKey(privateKey, \"private\");\n    const res: Message = { ...message };\n    res.body = key.decrypt(res.body, \"utf8\");\n    return res;\n  } catch (err) {\n    modalNotify(\"Invalid private key.\");\n    return { ...message };\n  }\n};\n\nconst encrypt = (message: Message, publicKey: string | null): Message => {\n  if (message.receiver.startsWith(GROUP_PREFIX) || message.type !== TYPE_TEXT) {\n    return { ...message };\n  }\n  if (!publicKey) {\n    modalNotify(\"Invalid public key from sender.\");\n    return { ...message };\n  }\n  try {\n    const key = new NodeRSA().importKey(publicKey, \"public\");\n    const res: Message = { ...message };\n    res.body = key.encrypt(res.body, \"base64\");\n    return res;\n  } catch (err) {\n    modalNotify(\"Invalid public key from sender.\");\n    return { ...message };\n  }\n};\n\n// top ten bruh moment functions.\nexport const addMessages = (\n  contacts: Contact[],\n  messages: Message[],\n  privateKey: string | null,\n  sent: boolean\n): Contact[] => {\n  const res = [...contacts];\n  messages.forEach((message) => {\n    if (message.receiver && message.receiver.startsWith(GROUP_PREFIX)) {\n      const idx = res.findIndex((contact) => {\n        return (\n          isGroup(contact.user) && contact.user.groupName === message.receiver\n        );\n      });\n      if (idx === -1) {\n        const newGroup: Group = { groupName: message.receiver, members: [] };\n        res.push({ user: newGroup, messages: [{ ...message }] });\n      } else {\n        res[idx].messages.push(message);\n      }\n    } else if (message.receiver && message.receiver === USER_SERVER) {\n    } else {\n      message = decrypt(message, privateKey);\n      const idx = res.findIndex((contact) => {\n        return (\n          isUser(contact.user) &&\n          contact.user.userName === (sent ? message.receiver : message.sender)\n        );\n      });\n      if (idx === -1) {\n        const newUser: User = {\n          userName: sent ? message.receiver : message.sender,\n          publicKey: null,\n          active: false,\n        };\n        res.push({ user: newUser, messages: [{ ...message }] });\n      } else {\n        res[idx].messages.push(message);\n      }\n    }\n  });\n  return res;\n};\n\nconst updateScroll = (): void => {\n  const element = document.getElementById(\"scrolldiv\");\n  if (element) {\n    element.scrollTop = element.scrollHeight;\n  }\n};\n\nconst distinct = (messages: Message[]): Message[] => {\n  return [\n    ...new Map(messages.map((item: Message) => [item[\"id\"], item])).values(),\n  ];\n};\n\nconst MessengerMain = (): JSX.Element => {\n  const { state, dispatch } = useContext(FirebirdContext);\n  const [text, setText] = useState(\"\");\n  const [file, setFile] = useState<string | null>(null);\n\n  useEffect(() => {\n    updateScroll();\n  }, [state.contacts]);\n\n  const userPresent =\n    state.currentReceiver &&\n    state.contacts.filter((contact) => {\n      if (\n        isUser(contact.user) &&\n        contact.user.userName === state.currentReceiver\n      ) {\n        return true;\n      }\n      if (\n        isGroup(contact.user) &&\n        contact.user.groupName === state.currentReceiver\n      ) {\n        return true;\n      }\n      return false;\n    }).length !== 0;\n\n  const sendMessage = (data: string | FormData, type: string): void => {\n    const timestamp = Date.now();\n    const message: Message = {\n      timestamp: Date.now(),\n      id: crypto\n        .createHash(\"sha256\")\n        .update(timestamp + \".\" + state.auth.userName)\n        .digest(\"hex\"),\n      type: type,\n      sender: state.auth.userName ? state.auth.userName : \"\",\n      receiver: state.currentReceiver ? state.currentReceiver : \"\",\n      body: data,\n      status: MESSAGE_PENDING,\n    };\n    let publicKey = null;\n    const contact = state.contacts.filter((contact) => {\n      if (\n        isUser(contact.user) &&\n        contact.user.userName === state.currentReceiver\n      ) {\n        return true;\n      }\n      return false;\n    });\n    if (contact.length && isUser(contact[0].user)) {\n      publicKey = contact[0].user.publicKey;\n    }\n    socket.emit(\n      SEND_MESSAGE,\n      JSON.stringify({\n        userName: state.auth.userName,\n        sessionKey: state.auth.sessionKey,\n        message: { ...encrypt(message, publicKey), status: undefined },\n      })\n    );\n    dispatch({\n      type: ActionTypes.SEND_NEW_MESSAGE,\n      payload: message,\n    });\n    setText(\"\");\n  };\n\n  useEffect(() => {\n    if (!socket.connected) {\n      socket.connect();\n    }\n\n    socket.emit(\n      \"new_connection\",\n      JSON.stringify({\n        userName: state.auth.userName,\n        sessionKey: state.auth.sessionKey,\n      })\n    );\n\n    socket.on(RECV_MESSAGE, (data: any) => {\n      const message: Message = JSON.parse(data);\n      dispatch({ type: ActionTypes.NEW_MESSAGE, payload: message });\n    });\n\n    socket.on(ACK_MESSAGE, (data: any) => {\n      const message: Message = JSON.parse(data);\n      dispatch({ type: ActionTypes.SET_ACK_FLAG, payload: message });\n    });\n\n    socket.on(USER_STATE_CHANGE, (data: any) => {\n      console.log(\"user_state_change: \" + data);\n    });\n\n    return () => {\n      socket.close();\n    };\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    const getPendingMessages = async () => {\n      if (state.auth.userName && state.auth.sessionKey) {\n        try {\n          const res = await API.get(\n            `/api/pendingMessages?userName=${state.auth.userName}&sessionKey=${state.auth.sessionKey}`\n          );\n          const messages: Message[] = res.data.messageList;\n          const data = localStorage.getItem(\n            state.auth.userName + CONTACTS_SUFFIX\n          );\n          const contacts = data ? JSON.parse(data) : [];\n          const updatedContacts = addMessages(\n            contacts,\n            messages,\n            state.auth.privateKey,\n            false\n          );\n          dispatch({\n            type: ActionTypes.UPDATE_CONTACTS,\n            payload: updatedContacts,\n          });\n        } catch (err) {\n          if (err.response) {\n            switch (err.response.status) {\n              case 401:\n                modalNotify(\n                  \"Session key may have expired, please login again.\"\n                );\n                break;\n              default:\n                modalNotify(\"Something went wrong. Try again.\");\n                break;\n            }\n          } else {\n            modalNotify(\"Could not contact contact server.\");\n          }\n        }\n      }\n    };\n    getPendingMessages();\n  }, [\n    dispatch,\n    state.auth.sessionKey,\n    state.auth.userName,\n    state.auth.privateKey,\n  ]);\n\n  const reader = new FileReader();\n  reader.addEventListener(\"load\", () => {\n    if (reader.result) {\n      setFile(reader.result.toString());\n    }\n  });\n\n  useEffect(() => {\n    if (file) {\n      sendMessage(file, TYPE_IMAGE);\n      setFile(null);\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [file]);\n\n  const MessageView = (message: Message, key: number): JSX.Element => {\n    const MessageViewInner = (): JSX.Element => {\n      var icon: JSX.Element = <></>;\n      switch (message.status) {\n        case MESSAGE_PENDING:\n          icon = <i className=\"material-icons\">access_time</i>;\n          break;\n        case MESSAGE_FAILED:\n          icon = <i className=\"material-icons\">error</i>;\n          break;\n        case MESSAGE_SENT:\n          icon = <i className=\"material-icons\">check_circle</i>;\n          break;\n      }\n      var body: JSX.Element = <></>;\n      if (message.type === TYPE_TEXT && typeof message.body === \"string\") {\n        body = <>{message.body}</>;\n      } else if (\n        message.type === TYPE_IMAGE &&\n        typeof message.body === \"string\"\n      ) {\n        body = (\n          <>\n            <img\n              className={styles.image + \" materialboxed\"}\n              src={message.body}\n              alt=\"<>img data not loaded</>\"\n            />\n          </>\n        );\n      }\n\n      return (\n        <>\n          <p>\n            <i className=\"material-icons\">account_circle</i>\n            <small>{message.sender.replace(USER_PREFIX, \"\")}</small>\n          </p>\n          <p>{body}</p>\n          <p>\n            <small>{new Date(message.timestamp).toISOString()}</small>\n            <small className=\"right\">{icon}</small>\n          </p>\n        </>\n      );\n    };\n\n    return (\n      <div key={key} className={styles.MessageView}>\n        <div className=\"row\">\n          {message.sender !== state.auth.userName ? (\n            <div\n              className={\n                styles.receiver +\n                \" \" +\n                (message.type === TYPE_IMAGE ? styles.reimage : \"\") +\n                \" col l5 s8\"\n              }\n            >\n              <MessageViewInner />\n            </div>\n          ) : (\n            <div className={styles.sender + \" col l5 s8 offset-l7  offset-s4\"}>\n              <MessageViewInner />\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className={styles.MessengerMain}>\n      {userPresent ? (\n        <div className={styles.header + \" row\"}>\n          <div className=\"col s12\">\n            <h5>{state.currentReceiver}</h5>\n          </div>\n        </div>\n      ) : (\n        \"\"\n      )}\n      <div className=\"row\">\n        {userPresent ? (\n          <div id=\"scrolldiv\" className={styles.scroll + \" col s12\"}>\n            {distinct(\n              state.contacts.filter((contact) => {\n                if (\n                  isUser(contact.user) &&\n                  contact.user.userName === state.currentReceiver\n                ) {\n                  return true;\n                }\n                if (\n                  isGroup(contact.user) &&\n                  contact.user.groupName === state.currentReceiver\n                ) {\n                  return true;\n                }\n                return false;\n              })[0].messages\n            ).map(MessageView)}\n          </div>\n        ) : (\n          <div\n            className={styles.empty + \" col s12 valign-wrapper center-align\"}\n          >\n            <div className={styles.ncscenter}>\n              <h6>No contact selected.</h6>\n            </div>\n          </div>\n        )}\n      </div>\n      {userPresent ? (\n        <div className={styles.input + \" row\"}>\n          <div className=\"col s12\">\n            <div className=\"row\">\n              <div className=\"col s8 l10 input-field\">\n                <input\n                  id=\"main-text-send\"\n                  type=\"text\"\n                  className=\"validate\"\n                  value={text}\n                  onChange={(e) => {\n                    setText(e.target.value);\n                  }}\n                />\n                <label htmlFor=\"main-text-send\">Type a message</label>\n              </div>\n              <div className=\"col l1 s2 center\">\n                <button\n                  className=\"btn\"\n                  onClick={() => {\n                    if (state.currentReceiver) {\n                      sendMessage(text, TYPE_TEXT);\n                    }\n                  }}\n                >\n                  <i className=\"material-icons\">send</i>\n                </button>\n              </div>\n              <div className=\"col l1 s2 center\">\n                <input\n                  id=\"imgupload\"\n                  type=\"file\"\n                  hidden\n                  onChange={(e) => {\n                    if (e.target.files && e.target.files.length) {\n                      reader.readAsDataURL(e.target.files[0]);\n                    } else {\n                      setFile(null);\n                    }\n                  }}\n                />\n                <button\n                  className=\"btn\"\n                  onClick={() => {\n                    const btn = document.getElementById(\"imgupload\");\n                    if (btn) {\n                      btn.click();\n                    }\n                  }}\n                >\n                  <i className=\"material-icons\">add_a_photo</i>\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      ) : (\n        \"\"\n      )}\n    </div>\n  );\n};\n\nexport default MessengerMain;\n","import { createContext, Dispatch, useReducer } from \"react\";\nimport { addMessages } from \"../Components/Messenger/MessengerMain/MessengerMain\";\nimport {\n  CONTACTS_SUFFIX,\n  MESSAGE_FAILED,\n  MESSAGE_SENT,\n  PRIVATE_KEY_SUFFIX,\n  PUBLIC_KEY_SUFFIX,\n  SESSION_KEY,\n} from \"../constants\";\nimport ActionTypes from \"./ActionTypes\";\n\nexport interface User {\n  userName: string;\n  publicKey: string | null;\n  active: boolean;\n}\n\nexport const isUser = (o: any): o is User => {\n  return \"userName\" in o && \"publicKey\" in o && \"active\" in o;\n};\n\nexport interface Group {\n  groupName: string;\n  members: string[];\n}\n\nexport const isGroup = (o: any): o is Group => {\n  return \"groupName\" in o && \"members\" in o;\n};\n\nexport interface Message {\n  timestamp: number;\n  id: string;\n  type: string;\n  sender: string;\n  receiver: string;\n  body: any;\n  status?: string;\n}\n\nexport const isMessage = (o: any): o is Message => {\n  return (\n    \"timestamp\" in o &&\n    \"id\" in o &&\n    \"type\" in o &&\n    \"sender\" in o &&\n    \"receiver\" in o &&\n    \"body\" in o\n  );\n};\n\nexport interface Contact {\n  user: User | Group;\n  messages: Message[];\n}\n\nexport const isContact = (o: any): o is Contact => {\n  return \"user\" in o && \"messages\" in o;\n};\n\nexport interface FirebirdState {\n  auth: {\n    userName: string | null;\n    sessionKey: string | null;\n    privateKey: string | null;\n    publicKey: string | null;\n    hash: string | null;\n  };\n  contacts: Contact[];\n  currentReceiver: string | null;\n}\n\nexport const isFirebirdState = (o: any): o is FirebirdState => {\n  return (\n    \"auth\" in o &&\n    \"sessionKey\" in o.auth &&\n    \"privateKey\" in o.auth &&\n    \"publicKey\" in o.auth &&\n    \"hash\" in o.auth &&\n    \"contacts\" in o &&\n    \"currentReceiver\" in o\n  );\n};\n\nexport interface FirebirdContextAction {\n  type: string;\n  payload: any;\n}\n\nconst initState: FirebirdState = {\n  auth: {\n    userName: null,\n    sessionKey: null,\n    privateKey: null,\n    publicKey: null,\n    hash: null,\n  },\n  contacts: [],\n  currentReceiver: null,\n};\n\nconst FirebirdContext = createContext<{\n  state: FirebirdState;\n  dispatch: Dispatch<FirebirdContextAction>;\n}>({ state: initState, dispatch: () => null });\n\nexport const FirebirdContextReducer = (\n  state: FirebirdState,\n  action: FirebirdContextAction\n): FirebirdState => {\n  switch (action.type) {\n    case ActionTypes.SIGN_UP:\n      localStorage.setItem(\n        action.payload.userName + PRIVATE_KEY_SUFFIX,\n        action.payload.privateKey\n      );\n      localStorage.setItem(\n        action.payload.userName + PUBLIC_KEY_SUFFIX,\n        action.payload.publicKey\n      );\n      return { ...state, auth: { ...state.auth, ...action.payload } };\n    case ActionTypes.LOAD_RSA_KEYS:\n      return { ...state, auth: { ...state.auth, ...action.payload } };\n    case ActionTypes.SIGN_IN:\n      return { ...state, auth: { ...state.auth, ...action.payload } };\n    case ActionTypes.LOAD_USER_LOCAL_STATE:\n      return { ...state, contacts: [...action.payload] };\n    case ActionTypes.UPDATE_CONTACTS:\n      localStorage.setItem(\n        state.auth.userName + CONTACTS_SUFFIX,\n        JSON.stringify(action.payload)\n      );\n      return { ...state, contacts: [...action.payload] };\n    case ActionTypes.SET_RECEIVER:\n      const contacts = state.contacts.map((contact) => {\n        if (\n          isUser(contact.user) &&\n          contact.user.userName === action.payload.currentReceiver\n        ) {\n          return {\n            ...contact,\n            user: {\n              ...contact.user,\n              publicKey: action.payload.publicKey\n                ? action.payload.publicKey\n                : contact.user.publicKey,\n              active: action.payload.active,\n            },\n          };\n        } else if (\n          isGroup(contact.user) &&\n          contact.user.groupName === action.payload.currentReceiver\n        ) {\n          return {\n            ...contact,\n            user: {\n              ...contact.user,\n              members: [...action.payload.members],\n            },\n          };\n        } else {\n          return contact;\n        }\n      });\n      localStorage.setItem(\n        state.auth.userName + CONTACTS_SUFFIX,\n        JSON.stringify(contacts)\n      );\n      return {\n        ...state,\n        currentReceiver: action.payload.currentReceiver,\n        contacts: contacts,\n      };\n    case ActionTypes.NEW_MESSAGE:\n      const contactsNM = addMessages(\n        state.contacts,\n        [action.payload],\n        state.auth.privateKey,\n        false\n      );\n      localStorage.setItem(\n        state.auth.userName + CONTACTS_SUFFIX,\n        JSON.stringify(contactsNM)\n      );\n      return { ...state, contacts: [...contactsNM] };\n    case ActionTypes.SEND_NEW_MESSAGE:\n      const contactsSNM = addMessages(\n        state.contacts,\n        [action.payload],\n        null,\n        true\n      );\n      localStorage.setItem(\n        state.auth.userName + CONTACTS_SUFFIX,\n        JSON.stringify(contactsSNM)\n      );\n      return { ...state, contacts: [...contactsSNM] };\n    case ActionTypes.SET_ACK_FLAG:\n      const contactsSAF = state.contacts.map((contact: Contact) => {\n        return {\n          ...contact,\n          messages: contact.messages.map((message: Message) => {\n            if (message.id === action.payload.id) {\n              return {\n                ...message,\n                status: action.payload.body ? MESSAGE_SENT : MESSAGE_FAILED,\n              };\n            } else {\n              return message;\n            }\n          }),\n        };\n      });\n      localStorage.setItem(\n        state.auth.userName + CONTACTS_SUFFIX,\n        JSON.stringify(contactsSAF)\n      );\n      return { ...state, contacts: [...contactsSAF] };\n    case ActionTypes.LOGOUT:\n      sessionStorage.removeItem(SESSION_KEY);\n      return { ...state, auth: { ...state.auth, sessionKey: action.payload } };\n    default:\n      return state;\n  }\n};\n\nexport const FirebirdContextProvider = (props: any): JSX.Element => {\n  const [state, dispatch] = useReducer(FirebirdContextReducer, initState);\n  return (\n    <FirebirdContext.Provider value={{ state, dispatch }}>\n      {props.children}\n    </FirebirdContext.Provider>\n  );\n};\n\nexport default FirebirdContext;\n","import { useContext, useEffect, useState } from \"react\";\nimport FirebirdContext from \"../../FirebirdContext/FirebirdContext\";\nimport NodeRsa from \"node-rsa\";\nimport crypto from \"crypto\";\nimport styles from \"./Login.module.scss\";\nimport API from \"../../API/API\";\nimport ActionTypes from \"../../FirebirdContext/ActionTypes\";\nimport {\n  PRIVATE_KEY_SUFFIX,\n  PUBLIC_KEY_SUFFIX,\n  SESSION_KEY,\n  USER_PREFIX,\n} from \"../../constants\";\n\nconst Login = (): JSX.Element => {\n  const { state, dispatch } = useContext(FirebirdContext);\n  const [userName, setUserName] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  useEffect(() => {\n    const privateKey = localStorage.getItem(\n      USER_PREFIX + userName + PRIVATE_KEY_SUFFIX\n    );\n    const publicKey = localStorage.getItem(\n      USER_PREFIX + userName + PUBLIC_KEY_SUFFIX\n    );\n    if (privateKey && publicKey) {\n      const hash = crypto.createHash(\"sha256\").update(privateKey).digest(\"hex\");\n      dispatch({\n        type: ActionTypes.LOAD_RSA_KEYS,\n        payload: { privateKey, publicKey, hash },\n      });\n    } else {\n      dispatch({\n        type: ActionTypes.LOAD_RSA_KEYS,\n        payload: { privateKey: null, publicKey: null, hash: null },\n      });\n    }\n  }, [dispatch, userName]);\n\n  const onSignIn = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setErrorMessage(\"\");\n    const hash = state.auth.hash;\n    if (hash) {\n      try {\n        setErrorMessage(\"Signing you in...\");\n        const res = await API.post(\"/api/validateUser\", {\n          userName: USER_PREFIX + userName,\n          hash: hash,\n        });\n        sessionStorage.setItem(\n          SESSION_KEY,\n          JSON.stringify({\n            ...state.auth,\n            sessionKey: res.data.sessionKey,\n            userName: res.data.userName,\n          })\n        );\n        dispatch({\n          type: ActionTypes.SIGN_IN,\n          payload: {\n            userName: res.data.userName,\n            sessionKey: res.data.sessionKey,\n          },\n        });\n      } catch (err) {\n        if (err.response) {\n          switch (err.response.status) {\n            case 401:\n              setErrorMessage(\"Authentication failed.\");\n              break;\n            default:\n              setErrorMessage(\"Something went wrong. Try again.\");\n          }\n        } else {\n          setErrorMessage(\"Could not contact server. Try again.\");\n        }\n      }\n    } else {\n      setErrorMessage(\"RSA credentials not found in local storage.\");\n    }\n  };\n\n  const onSignUp = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setErrorMessage(\"\");\n    const key = new NodeRsa({ b: 512 });\n    const publicKey = key.exportKey(\"public\");\n    const privateKey = key.exportKey(\"private\");\n    const hash = crypto.createHash(\"sha256\").update(privateKey).digest(\"hex\");\n    try {\n      setErrorMessage(\"Creating new user...\");\n      const res = await API.post(\"/api/createUser\", {\n        userName: USER_PREFIX + userName,\n        hash: hash,\n        publicKey: publicKey,\n      });\n      dispatch({\n        type: ActionTypes.SIGN_UP,\n        payload: {\n          userName: res.data.userName,\n          privateKey: privateKey,\n          publicKey: publicKey,\n          hash: hash,\n        },\n      });\n      setErrorMessage(\"User created.\");\n    } catch (err) {\n      if (err.response) {\n        switch (err.response.status) {\n          case 401:\n            setErrorMessage(\"User already exists.\");\n            break;\n          default:\n            setErrorMessage(\"Something went wrong. Try again.\");\n        }\n      } else {\n        setErrorMessage(\"Could not contact server. Try again.\");\n      }\n    }\n  };\n\n  return (\n    <div className={styles.Login}>\n      <div className={styles.loginContainer + \" row\"}>\n        <div\n          className={\n            styles.banner + \" col l8 m6 hide-on-small-only valign-wrapper\"\n          }\n        >\n          <div className=\"col m11 offset-m1\">\n            <h1>Introducing firebird.</h1>\n            <h5>A Fast end-to-end Encrypted Messenger</h5>\n            <p>\n              No more remembering passwords. <br />\n              Password-less authentication using asymmetric key pairs for one\n              tap <br />\n              login and signing up. <br />\n            </p>\n            <p>\n              All user information is persisted client-side. <br />\n            </p>\n          </div>\n        </div>\n        <div className={styles.loginForm + \" col l4 m6 s12 valign-wrapper\"}>\n          <form className={styles.formMain}>\n            <div className={styles.loginHeader + \" row\"}>\n              <h1>firebird</h1>\n              <h6>Secured by RSA end-to-end Encryption</h6>\n            </div>\n            <div className=\"row\">\n              <div className=\"input-field col s8 offset-s2\">\n                <input\n                  id=\"user\"\n                  type=\"text\"\n                  className=\"validate\"\n                  onChange={(e) => {\n                    setUserName(e.target.value);\n                    setErrorMessage(\"\");\n                  }}\n                  value={userName}\n                />\n                <label htmlFor=\"user\">Username: </label>\n                <span className={styles.error + \" helper-text\"}>\n                  {errorMessage}\n                </span>\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"col m3 offset-m3 s4 offset-s2 center\">\n                <button\n                  className={styles.submitbtn + \" btn\"}\n                  onClick={onSignIn}\n                >\n                  Sign In\n                </button>\n              </div>\n              <div className=\"col m3 s4 center\">\n                <button\n                  className={styles.submitbtn + \" btn\"}\n                  onClick={onSignUp}\n                >\n                  Sign Up\n                </button>\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;\n","import { useContext, useEffect, useState } from \"react\";\nimport API from \"../../../API/API\";\nimport { GROUP_PREFIX, USER_PREFIX } from \"../../../constants\";\nimport ActionTypes from \"../../../FirebirdContext/ActionTypes\";\nimport FirebirdContext, {\n  Contact,\n  Group,\n  isGroup,\n  isUser,\n} from \"../../../FirebirdContext/FirebirdContext\";\nimport { modalNotify } from \"../../Notifier/Notifier\";\nimport styles from \"./Contacts.module.scss\";\n\nconst Contacts = (props: any): JSX.Element => {\n  const { state, dispatch } = useContext(FirebirdContext);\n  const [search, setSearch] = useState(\"\");\n  const [filteredContacts, setFilteredContacts] = useState(state.contacts);\n\n  useEffect(() => {\n    const newFilteredContacts = state.contacts.filter((contact) => {\n      if (\n        isUser(contact.user) &&\n        contact.user.userName.startsWith(USER_PREFIX + search)\n      ) {\n        return true;\n      }\n      if (\n        isGroup(contact.user) &&\n        contact.user.groupName.startsWith(GROUP_PREFIX + search)\n      ) {\n        return true;\n      }\n      return false;\n    });\n    setFilteredContacts(newFilteredContacts);\n  }, [state.contacts, search]);\n\n  const addContact = async (user: string) => {\n    user = USER_PREFIX + user;\n    const alreadyExists = state.contacts.filter(\n      (x) => isUser(x.user) && x.user.userName === user\n    );\n    if (alreadyExists.length) {\n      return;\n    }\n    try {\n      const res = await API.get(\n        `/api/publicKey?userName=${state.auth.userName}&sessionKey=${state.auth.sessionKey}&user=${user}`\n      );\n      const contact: Contact = {\n        user: {\n          userName: user,\n          publicKey: res.data.publicKey,\n          active: false,\n        },\n        messages: [],\n      };\n      const contacts = state.contacts;\n      contacts.push(contact);\n      dispatch({ type: ActionTypes.UPDATE_CONTACTS, payload: contacts });\n      setSearch(\"\");\n    } catch (err) {\n      if (err.response) {\n        switch (err.response.status) {\n          case 401:\n            modalNotify(\"Invalid username.\");\n            break;\n          default:\n            modalNotify(\"Something went wrong. Try again.\");\n        }\n      } else {\n        modalNotify(\"Could not contact server. Try again.\");\n      }\n    }\n  };\n\n  const removeContact = (user: string) => {\n    const contacts = state.contacts.filter((x) => {\n      if (isUser(x.user) && x.user.userName === user) {\n        return false;\n      } else if (isGroup(x.user) && x.user.groupName === user) {\n        return false;\n      }\n      return true;\n    });\n    dispatch({\n      type: ActionTypes.UPDATE_CONTACTS,\n      payload: contacts,\n    });\n  };\n\n  const setCurrentReceiver = async (user: string) => {\n    let active: boolean = false;\n    let publicKey: string | null = null;\n    let members: string[] = [];\n    const contacts = state.contacts.filter((x) => {\n      if (isUser(x.user) && x.user.userName === user) {\n        return true;\n      } else if (isGroup(x.user) && x.user.groupName === user) {\n        return true;\n      }\n      return false;\n    });\n    if (contacts.length) {\n      const contact = contacts[0];\n      if (isUser(contact.user)) {\n        if (!contact.user.publicKey) {\n          try {\n            const res = await API.get(\n              `/api/publicKey?userName=${state.auth.userName}&sessionKey=${state.auth.sessionKey}&user=${user}`\n            );\n            publicKey = res.data.publicKey;\n          } catch (err) {\n            if (err.response) {\n              switch (err.response) {\n                case 401:\n                  modalNotify(\n                    \"Session key may have expired, please login again.\"\n                  );\n                  break;\n                default:\n                  modalNotify(\"Something went wrong. Try again.\");\n              }\n            } else {\n              modalNotify(\"Could not contact contact server.\");\n            }\n          }\n        }\n        try {\n          const res = await API.get(\n            `/api/userActive?userName=${state.auth.userName}&sessionKey=${state.auth.sessionKey}&user=${user}`\n          );\n          active = res.data.active;\n        } catch (err) {\n          if (err.response) {\n            switch (err.response) {\n              case 401:\n                modalNotify(\n                  \"Session key may have expired, please login again.\"\n                );\n                break;\n              default:\n                modalNotify(\"Something went wrong. Try again.\");\n            }\n          } else {\n            modalNotify(\"Could not contact contact server.\");\n          }\n        }\n      } else {\n        try {\n          const res = await API.get(\n            `/api/groupMembers?userName=${state.auth.userName}&sessionKey=${state.auth.sessionKey}&groupName=${user}`\n          );\n          members = res.data.groupMembers;\n        } catch (err) {\n          if (err.response) {\n            switch (err.response) {\n              case 401:\n                modalNotify(\n                  \"Session key may have expired, please login again.\"\n                );\n                break;\n              default:\n                modalNotify(\"Something went wrong. Try again.\");\n            }\n          } else {\n            modalNotify(\"Could not contact contact server.\");\n          }\n        }\n      }\n    }\n    dispatch({\n      type: ActionTypes.SET_RECEIVER,\n      payload: { currentReceiver: user, active, publicKey, members },\n    });\n  };\n\n  const createGroup = async (group: string) => {\n    group = GROUP_PREFIX + group;\n    try {\n      const res = await API.post(\"/api/createGroup\", {\n        userName: state.auth.userName,\n        sessionKey: state.auth.sessionKey,\n        groupName: group,\n      });\n      const newGroup: Group = { groupName: res.data.groupName, members: [] };\n      if (state.auth.userName) {\n        newGroup.members.push(state.auth.userName);\n      }\n      const contacts = state.contacts;\n      contacts.push({ user: newGroup, messages: [] });\n      dispatch({ type: ActionTypes.UPDATE_CONTACTS, payload: contacts });\n      setSearch(\"\");\n    } catch (err) {\n      if (err.response) {\n        switch (err.response.status) {\n          case 401:\n            modalNotify(\"Group already exists.\");\n            break;\n          default:\n            modalNotify(\"Something went wrong. Try again.\");\n        }\n      } else {\n        modalNotify(\"Could not contact server. Try again.\");\n      }\n    }\n  };\n\n  const joinGroup = async (group: string) => {\n    group = GROUP_PREFIX + group;\n    const alreadyExists = state.contacts.filter(\n      (x) => isGroup(x.user) && x.user.groupName === group\n    );\n    if (alreadyExists.length) {\n      return;\n    }\n    try {\n      const resJoin = await API.post(\"/api/joinGroup\", {\n        userName: state.auth.userName,\n        sessionKey: state.auth.sessionKey,\n        groupName: group,\n      });\n      const resMembers = await API.get(\n        `/api/groupMembers?userName=${state.auth.userName}&groupName=${group}&sessionKey=${state.auth.sessionKey}`\n      );\n      const newGroup: Group = {\n        groupName: resJoin.data.groupName,\n        members: resMembers.data.groupMembers,\n      };\n      const contacts = state.contacts;\n      contacts.push({ user: newGroup, messages: [] });\n      dispatch({ type: ActionTypes.UPDATE_CONTACTS, payload: contacts });\n      setSearch(\"\");\n    } catch (err) {\n      if (err.response) {\n        switch (err.response.status) {\n          case 401:\n            modalNotify(\"Group does not exist\");\n            break;\n          default:\n            modalNotify(\"Something went wrong. Try again.\");\n        }\n      } else {\n        modalNotify(\"Could not contact server. Try again.\");\n      }\n    }\n  };\n\n  const ContactView = (\n    contact: Contact,\n    index: number,\n    selected: boolean\n  ): JSX.Element => {\n    return (\n      <li key={index} className={styles.ContactView}>\n        <div>\n          <button\n            className={(selected ? styles.contactSelected : \"\") + \" btn\"}\n            onClick={() => {\n              setCurrentReceiver(\n                isUser(contact.user)\n                  ? contact.user.userName\n                  : contact.user.groupName\n              );\n            }}\n          >\n            <i className={styles.userIcon + \" large material-icons left\"}>\n              {isUser(contact.user) ? \"account_circle\" : \"group\"}\n            </i>\n            {isUser(contact.user)\n              ? contact.user.userName.replace(USER_PREFIX, \"\")\n              : contact.user.groupName.replace(GROUP_PREFIX, \"\")}\n            <a\n              className=\"right\"\n              href=\"#react\"\n              onClick={() =>\n                removeContact(\n                  isUser(contact.user)\n                    ? contact.user.userName\n                    : contact.user.groupName\n                )\n              }\n            >\n              <i className=\"material-icons\">close</i>\n            </a>\n          </button>\n        </div>\n      </li>\n    );\n  };\n\n  return (\n    <div className={styles.Contacts}>\n      <div className=\"row\">\n        <div className=\"col s12\">\n          <div className=\"row\">\n            <div className=\"col s12 m10 offset-m1 input-field\">\n              <i className=\"material-icons prefix\">search</i>\n              <input\n                id={props.name}\n                type=\"text\"\n                className=\"validate\"\n                onChange={(e) => {\n                  setSearch(e.target.value);\n                }}\n                value={search}\n              />\n              <label htmlFor={props.name}>Search or add new contacts</label>\n            </div>\n          </div>\n          <div className={styles.borderbtm + \" row\"}>\n            <div className=\"col s12 m10 offset-m1\">\n              <div className=\"row\">\n                <div className=\"col s4 center\">\n                  <button\n                    type=\"button\"\n                    className={styles.btn + \" btn btn-small\"}\n                    onClick={() => {\n                      addContact(search);\n                    }}\n                  >\n                    Add Contact\n                  </button>\n                </div>\n                <div className=\"col s4 center\">\n                  <button\n                    type=\"button\"\n                    className={styles.btn + \" btn btn-small\"}\n                    onClick={() => createGroup(search)}\n                  >\n                    Create Group\n                  </button>\n                </div>\n                <div className=\"col s4 center\">\n                  <button\n                    type=\"button\"\n                    className={styles.btn + \" btn btn-small\"}\n                    onClick={() => joinGroup(search)}\n                  >\n                    Join Group\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n          <ul className={styles.list}>\n            {filteredContacts.length ? (\n              filteredContacts.map((contact, index) =>\n                ContactView(\n                  contact,\n                  index,\n                  state.currentReceiver ===\n                    (isUser(contact.user)\n                      ? contact.user.userName\n                      : contact.user.groupName)\n                )\n              )\n            ) : (\n              <div className={styles.vh60 + \" valign-wrapper center-align\"}>\n                <div className={styles.ncpfcenter}>\n                  <h6>No contacts for applied filter</h6>\n                </div>\n              </div>\n            )}\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Contacts;\n","import { useContext } from \"react\";\nimport ActionTypes from \"../../FirebirdContext/ActionTypes\";\nimport FirebirdContext from \"../../FirebirdContext/FirebirdContext\";\nimport Contacts from \"./Contacts/Contacts\";\nimport MessengerMain from \"./MessengerMain/MessengerMain\";\nimport styles from \"./Messenger.module.scss\";\n\nconst Messenger = (): JSX.Element => {\n  const { dispatch } = useContext(FirebirdContext);\n\n  const logout = () => {\n    const elems = document.querySelectorAll(\".tooltipped\");\n    elems.forEach((elem) => {\n      const instance = M.Tooltip.getInstance(elem);\n      instance.close();\n    });\n    dispatch({ type: ActionTypes.LOGOUT, payload: null });\n  };\n\n  return (\n    <div className={styles.Messenger}>\n      <div className=\"hide-on-med-and-up\">\n        <div id=\"slide-out\" className={styles.sidenav + \" sidenav\"}>\n          <div className={styles.header + \" row\"}>\n            <div className=\"col m11 s10\">\n              <h2>firebird</h2>\n            </div>\n            <div className={styles.logout + \" col  m1 s2\"}>\n              <a\n                href=\"#react\"\n                className=\"tooltipped\"\n                data-position=\"bottom\"\n                data-tooltip=\"Logout\"\n                onClick={logout}\n              >\n                <i className=\"material-icons\">exit_to_app</i>\n              </a>\n            </div>\n          </div>\n          <Contacts name=\"sidenav\" />\n        </div>\n      </div>\n      <div className={styles.messengerContainer + \" row\"}>\n        <div className={styles.cborder + \" col l4 m6 hide-on-small-only\"}>\n          <div className={styles.header + \" row\"}>\n            <div className=\"col m11 s10\">\n              <h2>firebird</h2>\n            </div>\n            <div className={styles.logout + \" col m1 s2\"}>\n              <a\n                href=\"#react\"\n                className=\"tooltipped\"\n                data-position=\"bottom\"\n                data-tooltip=\"Logout\"\n                onClick={logout}\n              >\n                <i className=\"material-icons\">exit_to_app</i>\n              </a>\n            </div>\n          </div>\n          <Contacts name=\"main\" />\n        </div>\n        <div className=\"col l8 m6 s12\">\n          <div className={styles.sidenavIcon + \" row hide-on-med-and-up\"}>\n            <a\n              href=\"#react\"\n              data-target=\"slide-out\"\n              className=\"sidenav-trigger\"\n            >\n              <i className=\"material-icons\">menu</i>\n            </a>\n          </div>\n          <MessengerMain />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Messenger;\n","import FirebirdContext from \"./FirebirdContext/FirebirdContext\";\nimport { useContext, useEffect } from \"react\";\nimport Login from \"./Components/Login/Login\";\nimport Messenger from \"./Components/Messenger/Messenger\";\nimport M from \"materialize-css\";\nimport { SESSION_KEY } from \"./constants\";\nimport ActionTypes from \"./FirebirdContext/ActionTypes\";\nimport Notifier from \"./Components/Notifier/Notifier\";\n\nconst App = (): JSX.Element => {\n  const { state, dispatch } = useContext(FirebirdContext);\n\n  useEffect(() => {\n    M.AutoInit();\n  });\n\n  useEffect(() => {\n    const data = sessionStorage.getItem(SESSION_KEY);\n    if (data) {\n      const auth = JSON.parse(data);\n      dispatch({ type: ActionTypes.SIGN_IN, payload: auth });\n    }\n  }, [dispatch]);\n\n  return (\n    <>\n      {state.auth.sessionKey ? <Messenger /> : <Login />}\n      <Notifier />\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { FirebirdContextProvider } from \"./FirebirdContext/FirebirdContext\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <FirebirdContextProvider>\n      <App />\n    </FirebirdContextProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}