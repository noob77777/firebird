{"version":3,"sources":["Components/Login/Login.module.scss","constants.ts","FirebirdContext/ActionTypes.ts","FirebirdContext/FirebirdContext.tsx","API/API.ts","Components/Login/Login.tsx","Components/Messenger/Messenger.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["module","exports","USER_PREFIX","PRIVATE_KEY_SUFFIX","PUBLIC_KEY_SUFFIX","ActionTypes","LOAD_RSA_KEYS","SIGN_IN","SIGN_UP","initState","auth","userName","sessionKey","privateKey","publicKey","hash","contacts","currentReceiver","FirebirdContext","createContext","state","dispatch","FirebirdContextReducer","action","type","localStorage","setItem","payload","FirebirdContextProvider","props","useReducer","Provider","value","children","API","axios","create","baseURL","timeout","Login","useContext","useState","setUserName","errorMessage","setErrorMessage","useEffect","getItem","crypto","createHash","update","digest","onSignIn","e","a","preventDefault","post","res","data","response","status","onSignUp","key","NodeRsa","b","exportKey","className","styles","loginContainer","banner","loginForm","formMain","loginHeader","id","onChange","target","htmlFor","error","submitbtn","onClick","Messenger","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0GACAA,EAAOC,QAAU,CAAC,OAAS,sBAAsB,MAAQ,qBAAqB,eAAiB,8BAA8B,UAAY,yBAAyB,SAAW,wBAAwB,YAAc,2BAA2B,OAAS,sBAAsB,MAAQ,qBAAqB,UAAY,2B,qZCCzSC,EAAsB,QAItBC,EAA6B,eAC7BC,EAA4B,cCD1BC,EANK,CAClBC,cAAe,gBACfC,QAAS,UACTC,QAAS,W,OC8ELC,EAA2B,CAC/BC,KAAM,CACJC,SAAU,KACVC,WAAY,KACZC,WAAY,KACZC,UAAW,KACXC,KAAM,MAERC,SAAU,GACVC,gBAAiB,MAGbC,EAAkBC,wBAGrB,CAAEC,MAAOX,EAAWY,SAAU,kBAAM,QAE1BC,EAAyB,SACpCF,EACAG,GAEA,OAAQA,EAAOC,MACb,KAAKnB,EAAYG,QASf,OARAiB,aAAaC,QACXH,EAAOI,QAAQhB,SAAWR,EAC1BoB,EAAOI,QAAQjB,KAAKG,YAEtBY,aAAaC,QACXH,EAAOI,QAAQhB,SAAWP,EAC1BmB,EAAOI,QAAQjB,KAAKI,WAEf,2BAAKM,GAAZ,IAAmBV,KAAK,2BAAMU,EAAMV,MAASa,EAAOI,QAAQjB,QAC9D,KAAKL,EAAYC,cAEjB,KAAKD,EAAYE,QACf,OAAO,2BAAKa,GAAZ,IAAmBV,KAAK,2BAAMU,EAAMV,MAASa,EAAOI,WACtD,QACE,OAAOP,IAIAQ,EAA0B,SAACC,GAA6B,IAAD,EACxCC,qBAAWR,EAAwBb,GADK,mBAC3DW,EAD2D,KACpDC,EADoD,KAElE,OACE,cAACH,EAAgBa,SAAjB,CAA0BC,MAAO,CAAEZ,QAAOC,YAA1C,SACGQ,EAAMI,YAKEf,I,qFC3HAgB,E,OALHC,EAAMC,OAAO,CACvBC,QHJqC,wBGKrCC,QAAS,MCmLIC,EA3KD,WAAoB,IAAD,EACHC,qBAAWtB,GAA/BE,EADuB,EACvBA,MAAOC,EADgB,EAChBA,SADgB,EAECoB,mBAAS,IAFV,mBAExB9B,EAFwB,KAEd+B,EAFc,OAGSD,mBAAS,IAHlB,mBAGxBE,EAHwB,KAGVC,EAHU,KAK/BC,qBAAU,WACR,IAAMhC,EAAaY,aAAaqB,QAC9B5C,EAAcS,EAAWR,GAErBW,EAAYW,aAAaqB,QAC7B5C,EAAcS,EAAWP,GAE3B,GAAIS,GAAcC,EAAW,CAC3B,IAAMC,EAAOgC,IAAOC,WAAW,UAAUC,OAAOpC,GAAYqC,OAAO,OACnE7B,EAAS,CACPG,KAAMnB,EAAYC,cAClBqB,QAAS,CAAEd,aAAYC,YAAWC,eAGpCM,EAAS,CACPG,KAAMnB,EAAYC,cAClBqB,QAAS,CAAEd,WAAY,KAAMC,UAAW,KAAMC,KAAM,UAGvD,CAACM,EAAUV,IAEd,IAAMwC,EAAQ,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,yDACfD,EAAEE,iBACFV,EAAgB,MACV7B,EAAOK,EAAMV,KAAKK,MAHT,iCAMX6B,EAAgB,qBANL,SAOOV,EAAIqB,KAAK,oBAAqB,CAC9C5C,SAAUT,EAAcS,EACxBI,KAAMA,IATG,OAOLyC,EAPK,OAWXnC,EAAS,CACPG,KAAMnB,EAAYE,QAClBoB,QAAS,CACPhB,SAAU6C,EAAIC,KAAK9C,SACnBC,WAAY4C,EAAIC,KAAK7C,cAGzBgC,EAAgB,IAlBL,sDAoBP,KAAIc,SApBG,sBAqBD,KAAIA,SAASC,OArBZ,OAsBF,MAtBE,gCAuBLf,EAAgB,yBAvBX,6BA0BLA,EAAgB,mCA1BX,gCA6BTA,EAAgB,uCA7BP,gCAiCbA,EAAgB,8CAjCH,0DAAH,sDAqCRgB,EAAQ,uCAAG,WAAOR,GAAP,uBAAAC,EAAA,6DACfD,EAAEE,iBACFV,EAAgB,IACViB,EAAM,IAAIC,IAAQ,CAAEC,EAAG,MACvBjD,EAAY+C,EAAIG,UAAU,UAC1BnD,EAAagD,EAAIG,UAAU,WAC3BjD,EAAOgC,IAAOC,WAAW,UAAUC,OAAOpC,GAAYqC,OAAO,OANpD,SAQbN,EAAgB,wBARH,UASKV,EAAIqB,KAAK,kBAAmB,CAC5C5C,SAAUT,EAAcS,EACxBI,KAAMA,EACND,UAAWA,IAZA,QASP0C,EATO,OAcbnC,EAAS,CACPG,KAAMnB,EAAYG,QAClBmB,QAAS,CACPjB,KAAM,CACJG,WAAYA,EACZC,UAAWA,EACXC,KAAMA,GAERJ,SAAU6C,EAAIC,KAAK9C,YAGvBiC,EAAgB,gBAzBH,sDA2BT,KAAIc,SA3BK,sBA4BH,KAAIA,SAASC,OA5BV,OA6BJ,MA7BI,gCA8BPf,EAAgB,uBA9BT,6BAiCPA,EAAgB,mCAjCT,gCAoCXA,EAAgB,wCApCL,0DAAH,sDAyCd,OACE,qBAAKqB,UAAWC,IAAO3B,MAAvB,SACE,sBAAK0B,UAAWC,IAAOC,eAAiB,OAAxC,UACE,qBAAKF,UAAWC,IAAOE,OAAS,+BAAhC,SACE,sBAAKH,UAAU,uCAAf,UACE,uDACA,uEACA,gEACiC,uBADjC,uEAGM,uBAHN,yBAIwB,0BAExB,gFACiD,+BAIrD,qBAAKA,UAAWC,IAAOG,UAAY,gCAAnC,SACE,uBAAMJ,UAAWC,IAAOI,SAAxB,UACE,sBAAKL,UAAWC,IAAOK,YAAc,OAArC,UACE,0CACA,yEAEF,qBAAKN,UAAU,MAAf,SACE,sBAAKA,UAAU,+BAAf,UACE,uBACEO,GAAG,OACHhD,KAAK,OACLyC,UAAU,WACVQ,SAAU,SAACrB,GACTV,EAAYU,EAAEsB,OAAO1C,OACrBY,EAAgB,KAElBZ,MAAOrB,IAET,uBAAOgE,QAAQ,OAAf,wBACA,sBAAMV,UAAWC,IAAOU,MAAQ,eAAhC,SACGjC,SAIP,sBAAKsB,UAAU,MAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,wBACEA,UAAWC,IAAOW,UAAY,OAC9BC,QAAS3B,EAFX,uBAOF,qBAAKc,UAAU,gBAAf,SACE,wBACEA,UAAWC,IAAOW,UAAY,OAC9BC,QAASlB,EAFX,qCCrKDmB,EAJG,WAChB,OAAO,8BCSMC,EALH,WAAoB,IACtB5D,EAAUoB,qBAAWtB,GAArBE,MACR,OAAO,mCAAGA,EAAMV,KAAKE,WAAa,cAAC,EAAD,IAAgB,cAAC,EAAD,OCKrCqE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b82d854d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"border\":\"Login_border__1D4hz\",\"Login\":\"Login_Login__WctD9\",\"loginContainer\":\"Login_loginContainer__2sYHN\",\"loginForm\":\"Login_loginForm__2Maah\",\"formMain\":\"Login_formMain__3rcaN\",\"loginHeader\":\"Login_loginHeader__12uTQ\",\"banner\":\"Login_banner__ZQscA\",\"error\":\"Login_error__1hpMK\",\"submitbtn\":\"Login_submitbtn__2BgvP\"};","export const FIREBIRD_SERVER: string = \"http://localhost:8080\";\n\nexport const USER_PREFIX: string = \"user.\";\nexport const GROUP_PREFIX: string = \"group.\";\nexport const BROADCAST_GROUP: string = \"group.broadcast\";\nexport const USER_SERVER: string = \"user.firebird\";\nexport const PRIVATE_KEY_SUFFIX: string = \".private.key\";\nexport const PUBLIC_KEY_SUFFIX: string = \".public.key\";\n\nexport const NEW_CONNECTION: string = \"new_connection\";\nexport const SEND_MESSAGE: string = \"send_message\";\nexport const RECV_MESSAGE: string = \"recv_message\";\nexport const ACK_MESSAGE: string = \"ack_message\";\nexport const USER_STATE_CHANGE: string = \"user_state_change\";\n\nexport const TYPE_TEXT: string = \"text\";\nexport const TYPE_ACK: string = \"ack\";\nexport const TYPE_IMAGE: string = \"image\";\n","const ActionTypes = {\n  LOAD_RSA_KEYS: \"LOAD_RSA_KEYS\",\n  SIGN_IN: \"SIGN_IN\",\n  SIGN_UP: \"SIGN_UP\",\n};\n\nexport default ActionTypes;\n","import { createContext, Dispatch, useReducer } from \"react\";\nimport { PRIVATE_KEY_SUFFIX, PUBLIC_KEY_SUFFIX } from \"../constants\";\nimport ActionTypes from \"./ActionTypes\";\n\nexport interface User {\n  userName: string;\n  publicKey: string | null;\n  active: boolean;\n}\n\nexport const isUser = (o: any): o is User => {\n  return \"userName\" in o && \"publicKey\" in o && \"active\" in o;\n};\n\nexport interface Group {\n  groupName: string;\n  members: string[];\n}\n\nexport const isGroup = (o: any): o is Group => {\n  return \"groupName\" in o && \"members\" in o;\n};\n\nexport interface Message {\n  timestamp: number;\n  id: string;\n  type: string;\n  sender: string;\n  receiver: string;\n  body: any;\n}\n\nexport const isMessage = (o: any): o is Message => {\n  return (\n    \"timestamp\" in o &&\n    \"id\" in o &&\n    \"type\" in o &&\n    \"sender\" in o &&\n    \"receiver\" in o &&\n    \"body\" in o\n  );\n};\n\nexport interface Contact {\n  user: User | Group;\n  messages: Message[];\n}\n\nexport const isContact = (o: any): o is Contact => {\n  return \"user\" in o && \"messages\" in o;\n};\n\nexport interface FirebirdState {\n  auth: {\n    userName: string | null;\n    sessionKey: string | null;\n    privateKey: string | null;\n    publicKey: string | null;\n    hash: string | null;\n  };\n  contacts: Contact[];\n  currentReceiver: string | null;\n}\n\nexport const isFirebirdState = (o: any): o is FirebirdState => {\n  return (\n    \"auth\" in o &&\n    \"sessionKey\" in o.auth &&\n    \"privateKey\" in o.auth &&\n    \"publicKey\" in o.auth &&\n    \"hash\" in o.auth &&\n    \"contacts\" in o &&\n    \"currentReceiver\" in o\n  );\n};\n\nexport interface FirebirdContextAction {\n  type: string;\n  payload: any;\n}\n\nconst initState: FirebirdState = {\n  auth: {\n    userName: null,\n    sessionKey: null,\n    privateKey: null,\n    publicKey: null,\n    hash: null,\n  },\n  contacts: [],\n  currentReceiver: null,\n};\n\nconst FirebirdContext = createContext<{\n  state: FirebirdState;\n  dispatch: Dispatch<FirebirdContextAction>;\n}>({ state: initState, dispatch: () => null });\n\nexport const FirebirdContextReducer = (\n  state: FirebirdState,\n  action: FirebirdContextAction\n): FirebirdState => {\n  switch (action.type) {\n    case ActionTypes.SIGN_UP:\n      localStorage.setItem(\n        action.payload.userName + PRIVATE_KEY_SUFFIX,\n        action.payload.auth.privateKey\n      );\n      localStorage.setItem(\n        action.payload.userName + PUBLIC_KEY_SUFFIX,\n        action.payload.auth.publicKey\n      );\n      return { ...state, auth: { ...state.auth, ...action.payload.auth } };\n    case ActionTypes.LOAD_RSA_KEYS:\n      return { ...state, auth: { ...state.auth, ...action.payload } };\n    case ActionTypes.SIGN_IN:\n      return { ...state, auth: { ...state.auth, ...action.payload } };\n    default:\n      return state;\n  }\n};\n\nexport const FirebirdContextProvider = (props: any): JSX.Element => {\n  const [state, dispatch] = useReducer(FirebirdContextReducer, initState);\n  return (\n    <FirebirdContext.Provider value={{ state, dispatch }}>\n      {props.children}\n    </FirebirdContext.Provider>\n  );\n};\n\nexport default FirebirdContext;\n","import axios from \"axios\";\nimport { FIREBIRD_SERVER } from \"../constants\";\n\nconst API = axios.create({\n  baseURL: FIREBIRD_SERVER,\n  timeout: 1000,\n});\n\nexport default API;\n","import { useContext, useEffect, useState } from \"react\";\nimport FirebirdContext from \"../../FirebirdContext/FirebirdContext\";\nimport NodeRsa from \"node-rsa\";\nimport crypto from \"crypto\";\nimport styles from \"./Login.module.scss\";\nimport API from \"../../API/API\";\nimport ActionTypes from \"../../FirebirdContext/ActionTypes\";\nimport {\n  PRIVATE_KEY_SUFFIX,\n  PUBLIC_KEY_SUFFIX,\n  USER_PREFIX,\n} from \"../../constants\";\n\nconst Login = (): JSX.Element => {\n  const { state, dispatch } = useContext(FirebirdContext);\n  const [userName, setUserName] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  useEffect(() => {\n    const privateKey = localStorage.getItem(\n      USER_PREFIX + userName + PRIVATE_KEY_SUFFIX\n    );\n    const publicKey = localStorage.getItem(\n      USER_PREFIX + userName + PUBLIC_KEY_SUFFIX\n    );\n    if (privateKey && publicKey) {\n      const hash = crypto.createHash(\"sha256\").update(privateKey).digest(\"hex\");\n      dispatch({\n        type: ActionTypes.LOAD_RSA_KEYS,\n        payload: { privateKey, publicKey, hash },\n      });\n    } else {\n      dispatch({\n        type: ActionTypes.LOAD_RSA_KEYS,\n        payload: { privateKey: null, publicKey: null, hash: null },\n      });\n    }\n  }, [dispatch, userName]);\n\n  const onSignIn = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setErrorMessage(\"\");\n    const hash = state.auth.hash;\n    if (hash) {\n      try {\n        setErrorMessage(\"Signing you in...\");\n        const res = await API.post(\"/api/validateUser\", {\n          userName: USER_PREFIX + userName,\n          hash: hash,\n        });\n        dispatch({\n          type: ActionTypes.SIGN_IN,\n          payload: {\n            userName: res.data.userName,\n            sessionKey: res.data.sessionKey,\n          },\n        });\n        setErrorMessage(\"\");\n      } catch (err) {\n        if (err.response) {\n          switch (err.response.status) {\n            case 401:\n              setErrorMessage(\"Authentication failed\");\n              break;\n            default:\n              setErrorMessage(\"Something went wrong. Try again\");\n          }\n        } else {\n          setErrorMessage(\"Could not contact server. Try again\");\n        }\n      }\n    } else {\n      setErrorMessage(\"RSA credentials not found in local storage\");\n    }\n  };\n\n  const onSignUp = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setErrorMessage(\"\");\n    const key = new NodeRsa({ b: 512 });\n    const publicKey = key.exportKey(\"public\");\n    const privateKey = key.exportKey(\"private\");\n    const hash = crypto.createHash(\"sha256\").update(privateKey).digest(\"hex\");\n    try {\n      setErrorMessage(\"Creating new user...\");\n      const res = await API.post(\"/api/createUser\", {\n        userName: USER_PREFIX + userName,\n        hash: hash,\n        publicKey: publicKey,\n      });\n      dispatch({\n        type: ActionTypes.SIGN_UP,\n        payload: {\n          auth: {\n            privateKey: privateKey,\n            publicKey: publicKey,\n            hash: hash,\n          },\n          userName: res.data.userName,\n        },\n      });\n      setErrorMessage(\"User created\");\n    } catch (err) {\n      if (err.response) {\n        switch (err.response.status) {\n          case 401:\n            setErrorMessage(\"User already exists\");\n            break;\n          default:\n            setErrorMessage(\"Something went wrong. Try again\");\n        }\n      } else {\n        setErrorMessage(\"Could not contact server. Try again.\");\n      }\n    }\n  };\n\n  return (\n    <div className={styles.Login}>\n      <div className={styles.loginContainer + \" row\"}>\n        <div className={styles.banner + \" col l8 m6 s1 valign-wrapper\"}>\n          <div className=\"col m11 offset-m1 hide-on-small-only\">\n            <h1>Introducing firebird.</h1>\n            <h5>A Fast end-to-end Encrypted Messenger</h5>\n            <p>\n              No more remembering passwords. <br />\n              Password-less authentication using asymmetric key pairs for one\n              tap <br />\n              login and signing up. <br />\n            </p>\n            <p>\n              All user information is persisted client-side. <br />\n            </p>\n          </div>\n        </div>\n        <div className={styles.loginForm + \" col l4 m6 s11 valign-wrapper\"}>\n          <form className={styles.formMain}>\n            <div className={styles.loginHeader + \" row\"}>\n              <h1>firebird</h1>\n              <h6>Secured by RSA end-to-end Encryption</h6>\n            </div>\n            <div className=\"row\">\n              <div className=\"input-field col s8 offset-s2\">\n                <input\n                  id=\"user\"\n                  type=\"text\"\n                  className=\"validate\"\n                  onChange={(e) => {\n                    setUserName(e.target.value);\n                    setErrorMessage(\"\");\n                  }}\n                  value={userName}\n                />\n                <label htmlFor=\"user\">Username: </label>\n                <span className={styles.error + \" helper-text\"}>\n                  {errorMessage}\n                </span>\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"col s4 offset-s2 center\">\n                <button\n                  className={styles.submitbtn + \" btn\"}\n                  onClick={onSignIn}\n                >\n                  Sign In\n                </button>\n              </div>\n              <div className=\"col s4 center\">\n                <button\n                  className={styles.submitbtn + \" btn\"}\n                  onClick={onSignUp}\n                >\n                  Sign Up\n                </button>\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;\n","const Messenger = (): JSX.Element => {\n  return <></>;\n};\n\nexport default Messenger;\n","import FirebirdContext from \"./FirebirdContext/FirebirdContext\";\nimport { useContext } from \"react\";\nimport Login from \"./Components/Login/Login\";\nimport Messenger from \"./Components/Messenger/Messenger\";\n\nconst App = (): JSX.Element => {\n  const { state } = useContext(FirebirdContext);\n  return <>{state.auth.sessionKey ? <Messenger /> : <Login />}</>;\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { FirebirdContextProvider } from \"./FirebirdContext/FirebirdContext\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <FirebirdContextProvider>\n      <App />\n    </FirebirdContextProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}